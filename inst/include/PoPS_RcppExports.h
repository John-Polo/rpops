// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_PoPS_RCPPEXPORTS_H_GEN_
#define RCPP_PoPS_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace PoPS {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("PoPS", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("PoPS", "_PoPS_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in PoPS");
            }
        }
    }

    inline List pops_model(int random_seed, double lethal_temperature, bool use_lethal_temperature, int lethal_temperature_month, double reproductive_rate, bool weather, bool mortality_on, double short_distance_scale, IntegerMatrix infected, IntegerMatrix susceptible, IntegerMatrix mortality_tracker, IntegerMatrix mortality, IntegerMatrix total_plants, std::vector<NumericMatrix> treatment_maps, std::vector<int> treatment_years, std::vector<NumericMatrix> temperature, std::vector<NumericMatrix> weather_coefficient, int ew_res, int ns_res, std::string time_step, double mortality_rate = 0.0, int mortality_time_lag = 2, int season_month_start = 1, int season_month_end = 12, double start_time = 2018, double end_time = 2018, std::string dispersal_kern = "cauchy", double percent_short_distance_dispersal = 0.0, double long_distance_scale = 0.0, std::string treatment_method = "ratio", int treatment_month = 12, std::string wind_dir = "NONE", double kappa = 0) {
        typedef SEXP(*Ptr_pops_model)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pops_model p_pops_model = NULL;
        if (p_pops_model == NULL) {
            validateSignature("List(*pops_model)(int,double,bool,int,double,bool,bool,double,IntegerMatrix,IntegerMatrix,IntegerMatrix,IntegerMatrix,IntegerMatrix,std::vector<NumericMatrix>,std::vector<int>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,int,int,std::string,double,int,int,int,double,double,std::string,double,double,std::string,int,std::string,double)");
            p_pops_model = (Ptr_pops_model)R_GetCCallable("PoPS", "_PoPS_pops_model");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pops_model(Shield<SEXP>(Rcpp::wrap(random_seed)), Shield<SEXP>(Rcpp::wrap(lethal_temperature)), Shield<SEXP>(Rcpp::wrap(use_lethal_temperature)), Shield<SEXP>(Rcpp::wrap(lethal_temperature_month)), Shield<SEXP>(Rcpp::wrap(reproductive_rate)), Shield<SEXP>(Rcpp::wrap(weather)), Shield<SEXP>(Rcpp::wrap(mortality_on)), Shield<SEXP>(Rcpp::wrap(short_distance_scale)), Shield<SEXP>(Rcpp::wrap(infected)), Shield<SEXP>(Rcpp::wrap(susceptible)), Shield<SEXP>(Rcpp::wrap(mortality_tracker)), Shield<SEXP>(Rcpp::wrap(mortality)), Shield<SEXP>(Rcpp::wrap(total_plants)), Shield<SEXP>(Rcpp::wrap(treatment_maps)), Shield<SEXP>(Rcpp::wrap(treatment_years)), Shield<SEXP>(Rcpp::wrap(temperature)), Shield<SEXP>(Rcpp::wrap(weather_coefficient)), Shield<SEXP>(Rcpp::wrap(ew_res)), Shield<SEXP>(Rcpp::wrap(ns_res)), Shield<SEXP>(Rcpp::wrap(time_step)), Shield<SEXP>(Rcpp::wrap(mortality_rate)), Shield<SEXP>(Rcpp::wrap(mortality_time_lag)), Shield<SEXP>(Rcpp::wrap(season_month_start)), Shield<SEXP>(Rcpp::wrap(season_month_end)), Shield<SEXP>(Rcpp::wrap(start_time)), Shield<SEXP>(Rcpp::wrap(end_time)), Shield<SEXP>(Rcpp::wrap(dispersal_kern)), Shield<SEXP>(Rcpp::wrap(percent_short_distance_dispersal)), Shield<SEXP>(Rcpp::wrap(long_distance_scale)), Shield<SEXP>(Rcpp::wrap(treatment_method)), Shield<SEXP>(Rcpp::wrap(treatment_month)), Shield<SEXP>(Rcpp::wrap(wind_dir)), Shield<SEXP>(Rcpp::wrap(kappa)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_PoPS_RCPPEXPORTS_H_GEN_
